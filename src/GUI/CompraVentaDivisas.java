/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package GUI;

import Clases.BD_TXT;
import javax.swing.JOptionPane;

/**
 *
 * @author Code
 */
public class CompraVentaDivisas extends javax.swing.JInternalFrame {

    /**
     * Creates new form CompraVentaDivisas
     */
    BD_TXT db =new BD_TXT();
    int indiceBuscado=BD_TXT.indicebuscado;
    
    public CompraVentaDivisas() {
        initComponents();
        //Al iniciar PJ iniciara todo el programa
        
        JLempirasD.setText("Su saldo disponible en Lempiras: "+BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnCuenta() );
        JDolaresD.setText("Su saldo disponible en Dolares: "+BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnDolares());
        JEurosD.setText("Su saldo disponible en Euros: "+BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnEuros());
        Nombre.setText("Bienvenido "+BD_TXT.UsuariosDB.get(indiceBuscado).getNombre());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        JDolaresD = new javax.swing.JLabel();
        JEurosD = new javax.swing.JLabel();
        JLempirasD = new javax.swing.JLabel();
        JCombo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Nombre = new javax.swing.JLabel();
        Monto = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setText("Compra y Venta Euros/Dolares");

        JDolaresD.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        JDolaresD.setText("Dolares disponibles en la cuenta:");

        JEurosD.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        JEurosD.setText("Euros disponibles en la cuenta:");

        JLempirasD.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        JLempirasD.setText("Su saldo disponible en Lempiras:");

        JCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Compra Dolares", "Vender Dolares", "Compra Euros", "Vender Euros", "" }));
        JCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JComboActionPerformed(evt);
            }
        });

        jLabel2.setText("Monto:");

        jButton1.setText("Realizar Transacci√≥n ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Nombre.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        Nombre.setText("jLabel3");

        Monto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        jLabel3.setText("Valor del dolar : 24.66");

        jLabel4.setText("Valor del Euro : 26.43");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(194, 194, 194))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(263, 263, 263))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(JLempirasD, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Monto, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(JDolaresD, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JEurosD, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(128, 128, 128))))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(JLempirasD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(JDolaresD)
                .addGap(18, 18, 18)
                .addComponent(JEurosD)
                .addGap(51, 51, 51)
                .addComponent(JCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Monto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JComboActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       if (Monto.getText().isEmpty()){
           JOptionPane.showMessageDialog(null, "Monto invalido");
           db.bitacoraTXT(13);
       }else {
            String Transaccion= (String) JCombo.getSelectedItem();
        double MontoIngresado=Double.parseDouble(Monto.getText());
        double ValorDolar = 24.66;
        double ValorEuro = 26.43;
        //estas variable solo sirven para saber si puedo hacer la transaccion o no comparando 
        
        if (Monto.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Debe Ingresar un Monto");
            db.bitacoraTXT(11);
        }else {
            switch(Transaccion){
            case"Compra Dolares": 
                double montoEnLempiras = MontoIngresado * ValorDolar;  // Convertir monto a lempiras
                double saldoActualLempiras = BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnCuenta();
                if(saldoActualLempiras < montoEnLempiras ){
                    JOptionPane.showMessageDialog(null, "no tiene saldo suficiente para hacer transaccion");
                    db.bitacoraTXT(11);             
                }else{        
                    //Agregar dolares a monto Dolar
                    BD_TXT.UsuariosDB.get(indiceBuscado).setMontoEnDolares(BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnDolares()+MontoIngresado);
                     //restar lempiras al monto 
                    double restar=MontoIngresado*ValorDolar;//<------hare la conversion de dolares a lempiras
                    BD_TXT.UsuariosDB.get(indiceBuscado).setMontoEnCuenta(BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnCuenta()-restar);
                    //registrar en usuario y a bitacora
                    db.bitacoraTransaccionTXT(4, BD_TXT.UsuariosDB.get(indiceBuscado).getNombre() ,MontoIngresado , null);
                    db.bitacoraTransaccionTXT(5, BD_TXT.UsuariosDB.get(indiceBuscado).getNombre() ,montoEnLempiras , null);
                    //Registrar transaccion en movimientos
                    BD_TXT.UsuariosDB.get(indiceBuscado).addRegistrostransaccion(BD_TXT.UsuariosDB.get(indiceBuscado).getNombre() ,"", MontoIngresado, "Compra Dolares");
                    BD_TXT.UsuariosDB.get(indiceBuscado).addRegistrostransaccion(BD_TXT.UsuariosDB.get(indiceBuscado).getNombre() ,"",- montoEnLempiras, "Debito Lempiras por compra Dolares");
                    ActualizarPantalla();
                    JOptionPane.showMessageDialog(null, "Transaccion exitosa");
                    Monto.setText("");
                }
            break;
            
            case "Vender Dolares":
                double montoEnDolares = MontoIngresado;
                double saldoActualDolares = BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnDolares();
                if (saldoActualDolares < montoEnDolares) {
                    JOptionPane.showMessageDialog(null, "No tiene suficientes d√≥lares para hacer la transacci√≥n");
                    db.bitacoraTXT(12);
                } else {
                    // Restar d√≥lares del monto en d√≥lares
                    BD_TXT.UsuariosDB.get(indiceBuscado).setMontoEnDolares(
                        BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnDolares() - montoEnDolares
                    );

                    // Agregar lempiras al monto en cuenta
                    double agregarLempiras = montoEnDolares * ValorDolar;
                    BD_TXT.UsuariosDB.get(indiceBuscado).setMontoEnCuenta(
                        BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnCuenta() + agregarLempiras
                    );

                    // Registrar en usuario y a bit√°cora
                    db.bitacoraTransaccionTXT(6, BD_TXT.UsuariosDB.get(indiceBuscado).getNombre(), MontoIngresado, null);
                    db.bitacoraTransaccionTXT(7, BD_TXT.UsuariosDB.get(indiceBuscado).getNombre(), agregarLempiras, null);

                    // Registrar transacci√≥n en movimientos
                    BD_TXT.UsuariosDB.get(indiceBuscado).addRegistrostransaccion(
                        BD_TXT.UsuariosDB.get(indiceBuscado).getNombre(), "", -montoEnDolares, "Vender Dolares"
                    );
                    BD_TXT.UsuariosDB.get(indiceBuscado).addRegistrostransaccion(
                        BD_TXT.UsuariosDB.get(indiceBuscado).getNombre(), "", agregarLempiras, "Credito Lempiras por venta de Dolares"
                    );

                    ActualizarPantalla();
                    JOptionPane.showMessageDialog(null, "Transacci√≥n exitosa");
                    Monto.setText("");
                }
            break;
 //---------------------------------------------------------------Euros misma logica           
        case "Compra Euros":
            double montoEnLempirasEuros = MontoIngresado * ValorEuro;  // Convertir monto a lempiras
            double saldoActualLempirasEuros = BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnCuenta();
            if (saldoActualLempirasEuros < montoEnLempirasEuros) {
                JOptionPane.showMessageDialog(null, "No tiene saldo suficiente para hacer la transacci√≥n");
                db.bitacoraTXT(13);             
            } else {        
                // Agregar euros al monto en euros
                BD_TXT.UsuariosDB.get(indiceBuscado).setMontoEnEuros(
                    BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnEuros() + MontoIngresado
                );
                
                // Restar lempiras del monto en cuenta
                BD_TXT.UsuariosDB.get(indiceBuscado).setMontoEnCuenta(
                    BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnCuenta() - montoEnLempirasEuros
                );
                
                // Registrar en usuario y a bit√°cora
                db.bitacoraTransaccionTXT(8, BD_TXT.UsuariosDB.get(indiceBuscado).getNombre(), MontoIngresado, null);
                db.bitacoraTransaccionTXT(9, BD_TXT.UsuariosDB.get(indiceBuscado).getNombre(), montoEnLempirasEuros, null);
                
                // Registrar transacci√≥n en movimientos
                BD_TXT.UsuariosDB.get(indiceBuscado).addRegistrostransaccion(
                    BD_TXT.UsuariosDB.get(indiceBuscado).getNombre(), "", MontoIngresado, "Compra Euros"
                );
                BD_TXT.UsuariosDB.get(indiceBuscado).addRegistrostransaccion(
                    BD_TXT.UsuariosDB.get(indiceBuscado).getNombre(), "", -montoEnLempirasEuros, "Debito Lempiras por compra Euros"
                );
                
                ActualizarPantalla();
                JOptionPane.showMessageDialog(null, "Transacci√≥n exitosa");
                Monto.setText("");
            }
            break;
            
        case "Vender Euros":
            double montoEnEuros = MontoIngresado;
            double saldoActualEuros = BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnEuros();
            if (saldoActualEuros < montoEnEuros) {
                JOptionPane.showMessageDialog(null, "No tiene suficientes euros para hacer la transacci√≥n");
                db.bitacoraTXT(14);
            } else {
                // Restar euros del monto en euros
                BD_TXT.UsuariosDB.get(indiceBuscado).setMontoEnEuros(
                    BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnEuros() - montoEnEuros
                );

                // Agregar lempiras al monto en cuenta
                double agregarLempirasEuros = montoEnEuros * ValorEuro;
                BD_TXT.UsuariosDB.get(indiceBuscado).setMontoEnCuenta(
                    BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnCuenta() + agregarLempirasEuros
                );

                // Registrar en usuario y a bit√°cora
                db.bitacoraTransaccionTXT(10, BD_TXT.UsuariosDB.get(indiceBuscado).getNombre(), MontoIngresado, null);
                db.bitacoraTransaccionTXT(11, BD_TXT.UsuariosDB.get(indiceBuscado).getNombre(), agregarLempirasEuros, null);

                // Registrar transacci√≥n en movimientos
                BD_TXT.UsuariosDB.get(indiceBuscado).addRegistrostransaccion(
                    BD_TXT.UsuariosDB.get(indiceBuscado).getNombre(), "", -montoEnEuros, "Vender Euros"
                );
                BD_TXT.UsuariosDB.get(indiceBuscado).addRegistrostransaccion(
                    BD_TXT.UsuariosDB.get(indiceBuscado).getNombre(), "", agregarLempirasEuros, "Credito Lempiras por venta de Euros"
                );

                ActualizarPantalla();
                JOptionPane.showMessageDialog(null, "Transacci√≥n exitosa");
                Monto.setText("");
            }
            break;
            
            
        }
        }   
       }
        
       
    }//GEN-LAST:event_jButton1ActionPerformed

    
        private void ActualizarPantalla(){
            //Mostrar en pantalla
            JLempirasD.setText("Su saldo disponible en Lempiras: "+BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnCuenta() );
            JDolaresD.setText("Su saldo disponible en Dolares: "+BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnDolares());
            JEurosD.setText("Su saldo disponible en Euros: "+BD_TXT.UsuariosDB.get(indiceBuscado).getMontoEnEuros());  
                    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> JCombo;
    private javax.swing.JLabel JDolaresD;
    private javax.swing.JLabel JEurosD;
    private javax.swing.JLabel JLempirasD;
    private javax.swing.JFormattedTextField Monto;
    private javax.swing.JLabel Nombre;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
